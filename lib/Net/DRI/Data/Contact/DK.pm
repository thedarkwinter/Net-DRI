## Domain Registry Interface, Handling of contact data for .DK
##
## Copyright (c) 2006-2013 Patrick Mevzek <netdri@dotandco.com>. All rights reserved.
## Copyright (c) 2014-2015 David Makuni <d.makuni@live.co.uk>. All rights reserved.
## Copyright (c) 2013-2015 Paulo Jorge <paullojorgge@gmail.com>. All rights reserved.
##
## This file is part of Net::DRI
##
## Net::DRI is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## See the LICENSE file that comes with this distribution for more details.
####################################################################################################

package Net::DRI::Data::Contact::DK;

use strict;
use warnings;

use base qw(Net::DRI::Data::Contact);

use Net::DRI::Exception;

__PACKAGE__->register_attributes(qw(vat userType ean));

=pod

=head1 NAME

Net::DRI::Data::Contact::DK - Handle DK contact data for Net::DRI

=head1 DESCRIPTION

This subclass of Net::DRI::Data::Contact adds accessors and validation for
DK specific data.

=head1 METHODS

The following accessors/mutators can be called in chain, as they all return the object itself.

=head2 vat()

=head2 userType()

=head2 ean()

=head1 SUPPORT

For now, support questions should be sent to:

E<lt>d.makuni@live.co.uk<gt>

Please also see the SUPPORT file in the distribution.

=head1 SEE ALSO

http://www.dotandco.com/services/software/Net-DRI/

=head1 AUTHOR

David Makuni <d.makuni@live.co.uk>

=head1 COPYRIGHT

Copyright (c) 2006-2013 Patrick Mevzek <netdri@dotandco.com>. All rights reserved.
Copyright (c) 2014-2015 David Makuni <d.makuni@live.co.uk>. All rights reserved.
Copyright (c) 2013-2015 Paulo Jorge <paullojorgge@gmail.com>. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

See the LICENSE file that comes with this distribution for more details.

=cut

####################################################################################################

sub validate {
	my ($self,$change)=@_;
	$change||=0;
	my @errs;
	
	# This will trigger exception if a problem is found.
	$self->SUPER::validate($change); 
	
	# 'srid' field validation.
	push @errs,'"srid" is auto-generated by the registry and must be set to "auto" or omitted' if ( $self->srid() ne 'auto' );
	
	# 'userType' field is mandatory for all contacts.
	Net::DRI::Exception::usererr_insufficient_parameters('Invalid contact information: userType field is mandatory') unless ($self->userType());
	
	# userType valid values - company / public_organization / association / individual
	my @userTypeValues= qw(company public_organization association individual);
	my $userT = $self->userType();
	push @errs,'"userType" field can only accept the values: company|public_organization|association|individual' unless (grep {$_ eq $userT}@userTypeValues);
	
	# 'userType' field validation on other field(s) dependant on this field value.
	if ( $self->userType() eq 'company' ) {
	
		# 'vat' is mandatory for this contact type.
		push @errs,'"vat" field is mandatory for this contact type (company)' unless ($self->vat());
	
	} elsif ( $self->userType() eq 'public_organization' ) {
		
		# 'vat' is mandatory for this contact type.
		push @errs,'"vat" field is mandatory for this contact type (public_organization)' unless ($self->vat());
		
	} elsif ( $self->userType() eq 'association' ) {
		
		# 'ean' is mandatory for this contact type.
		push @errs,'"ean" field is mandatory for this contact type (association)' unless ($self->ean());
		
	} elsif ( $self->userType() eq 'individual' ) {
		
		# "ean" field is not supported for this contact type
		push @errs,'"ean" field is not supported by this contact type (individual)' if (defined $self->ean());
		
		# "vat" field is not supported for this contact type
		push @errs,'"vat" field is not supported by this contact type (individual)' if (defined $self->vat());
	}
	
	Net::DRI::Exception::usererr_invalid_parameters('Invalid contact information: '.join(' / ',@errs)) if @errs;
	 
	return 1; # everything is as it should be!
}

sub init {
	my ($self,$what,$ndr)=@_;
	
    if ( $what eq 'create' ) {
    	my $a=$self->auth();
		$self->auth({pw=>''}) unless ($a && (ref($a) eq 'HASH') && exists($a->{pw})); #authInfo is not used!
        $self->srid('auto') unless defined( $self->srid() );    ## we can not choose the ID
    }
	
	return;
}

####################################################################################################
1;
